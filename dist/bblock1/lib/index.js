"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmrServerlessApp = exports.EmrServerlessAppDefaults = void 0;
const cdk = require("aws-cdk-lib");
const constructs_1 = require("constructs");
const emr = require("aws-cdk-lib/aws-emrserverless");
const iam = require("aws-cdk-lib/aws-iam");
exports.EmrServerlessAppDefaults = {
    teamName: "default",
    applicationName: "default",
    environment: "dev",
    releaseLabel: "emr-6.9.0",
    type: "Spark",
    driverCpu: 2,
    driverDisk: 20,
    driverMemory: 8,
    workerCpu: 4,
    workerMemory: 16,
    minDrivers: 0,
    minWorkers: 0,
    maxWorkers: 10,
    autoStart: true,
    idleTimeoutMinutes: 5,
};
class EmrServerlessApp extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const account = cdk.Stack.of(this).account;
        const region = cdk.Stack.of(this).region;
        props = { ...exports.EmrServerlessAppDefaults, ...props };
        const driverCpu = Math.min(Math.max(Math.floor(props.driverCpu ?? 2), 1), 4);
        const driverMemory = Math.min(Math.max(Math.floor(props.driverMemory ?? 8), 4), 16);
        const driverDisk = Math.min(Math.max(Math.floor(props.driverDisk ?? 20), 20), 200);
        const workerCpu = Math.min(Math.max(Math.floor(props.workerCpu ?? 4), 1), 4);
        const workerMemory = Math.min(Math.max(Math.floor(props.workerMemory ?? 16), 8), 30);
        const workerDisk = Math.min(Math.max(Math.floor(props.workerDisk ?? 20), 20), 200);
        const minDrivers = Math.max(Math.floor(props.minDrivers ?? 0), 0);
        const minDrivers1 = Math.max(minDrivers, 1);
        const minWorkers = Math.max(Math.floor(props.minWorkers ?? 0), 0);
        const maxWorkers = Math.max(Math.floor(props.maxWorkers ?? minWorkers), 1);
        const maxCpu = minDrivers1 * driverCpu + maxWorkers * workerCpu;
        const maxMemory = minDrivers1 * driverMemory + maxWorkers * workerMemory;
        const maxDisk = minDrivers1 * driverDisk + maxWorkers * workerDisk;
        const initialCapacity = minDrivers > 0 || minWorkers > 0
            ? {
                initialCapacity: [
                    {
                        key: "Driver",
                        value: {
                            workerCount: Math.max(minDrivers, 1),
                            workerConfiguration: {
                                cpu: `${driverCpu} vCPU`,
                                memory: `${driverMemory} GB`,
                                disk: `${driverDisk} GB`,
                            },
                        },
                    },
                    {
                        key: "Executor",
                        value: {
                            workerCount: Math.max(minWorkers, 0),
                            workerConfiguration: {
                                cpu: `${workerCpu} vCPU`,
                                memory: `${workerMemory} GB`,
                                disk: `${workerDisk} GB`,
                            },
                        },
                    },
                ],
            }
            : {};
        const emrslProps = {
            name: `${props.teamName}-emr-serverless-${region}-${props.applicationName}-${props.environment}`,
            releaseLabel: props.releaseLabel ?? "emr-6.9.0",
            type: props.type ?? "Spark",
            autoStartConfiguration: { enabled: props.autoStart ?? true },
            autoStopConfiguration: { enabled: true, idleTimeoutMinutes: props.idleTimeoutMinutes ?? 5 },
            maximumCapacity: {
                cpu: `${maxCpu} vCPU`,
                memory: `${maxMemory} GB`,
                disk: `${maxDisk} GB`,
            },
            ...initialCapacity,
        };
        const entity = new emr.CfnApplication(this, `${id}EmrSlApp`, emrslProps);
        this.entity = entity;
        this.applicationId = this.entity.attrApplicationId;
        const jobPolicy = EmrServerlessApp.createIamProfile(scope, `${id}EmrSlJobProfile`, this.applicationId, `${this.entity.name}-job-profile`);
    }
    static createIamProfile(scope, id, emrAppArn, name) {
        return new iam.ManagedPolicy(scope, id + "-job-policy", {
            managedPolicyName: this.name,
            document: new iam.PolicyDocument({
                assignSids: true,
                statements: [
                    new iam.PolicyStatement({
                        effect: iam.Effect.ALLOW,
                        actions: [
                            "emr-serverless:GetApplication",
                            "emr-serverless:ListJobRuns",
                            "emr-serverless:TagResource",
                            "emr-serverless:UntagResource",
                            "emr-serverless:ListTagsForResource",
                            "emr-serverless:StartApplication",
                            "emr-serverless:StartJobRun",
                            "emr-serverless:StopApplication",
                        ],
                        resources: [emrAppArn],
                    }),
                    new iam.PolicyStatement({
                        effect: iam.Effect.ALLOW,
                        actions: [
                            "emr-serverless:CancelJobRun",
                            "emr-serverless:GetDashboardForJobRun",
                            "emr-serverless:GetJobRun",
                            "emr-serverless:ListTagsForResource",
                            "emr-serverless:TagResource",
                            "emr-serverless:UntagResource",
                        ],
                        resources: [`${emrAppArn}/jobruns/*`],
                    }),
                ],
            }),
        });
    }
}
exports.EmrServerlessApp = EmrServerlessApp;
//# sourceMappingURL=data:application/json;base64,